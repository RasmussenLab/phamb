#!/usr/bin/env python

configfile: 'config.yaml'

### Config Parameters
SAMPLETABLE = config.get("SAMPLETABLE")
FASTQDIR = config.get("FASTQDIR")
LOGFILE= config.get("LOGFILE")
PROJECT = config.get("cluster_project") # Who's paying for running this Flow on a Server-cluster?
TMP_DIR = config.get("tmpdir")
QC_HOST_DATABASE = config.get("QC_HOST_DATABASE")
QC_TRIMMOMATIC_PARAMS = config.get("QC_TRIMMOMATIC_PARAMS")
THREADS = config.get("threads_ppn")
VAMBDIR = config.get('vambdir')
GTDBTKREF='/home/projects/cpr_10006/data/Databases/gtdb/release95/release95'


# Parse samples
# Expecting a structure like:  SAMPLEID R1.fastq.gz R2.fastq.gz
CONTIGFILES = []
IDS = []
sample2path = {}
with open(SAMPLE_TABLE,'r') as infile:
    for line in infile:
        line = line.rstrip()
        fields = line.split('\t')
        IDS.append(fields[0])
        sample2path[fields[0]] = [fields[1], fields[2]]
        CONTIGFILE += [os.path.join('02_assembly',fields[0],fields[0]+'.contigs.flt.fa.gz')]


rule all:
    input:
        expand("01_qced/{sample}.R1.fastq.gz", sample=IDS),
        expand("01_qced/{sample}.R2.fastq.gz", sample=IDS),
        expand("02_assembly/{sample}/{sample}.contigs.flt.fa.gz", sample=IDS),
        expand("03_mapping/{sample}.bam", sample=IDS),
        "05_binning/vamb/clusters.tsv",
        "05_binning/vamb/checkm/checkm.results.txt",
        '05_binning/vamb/gtdbtk'




### QC 
rule QCfastq:
    input:
        FQ1 = lambda wildcards: '--input ' + sample2path[wildcards.sample][0],
        FQ2 = lambda wildcards: '--input ' + sample2path[wildcards.sample][1]
    params:
        SAMPLE = "{sample}",
        QC_TRIMMOMATIC_PARAMS = QC_TRIMMOMATIC_PARAMS,
        QC_HOST_DATABASE = QC_HOST_DATABASE,
        LOGDIR = 'log/QC',
        TMP_DIR = 'tmp/QC'
    output:
        FQ1QC="01_qced/{sample}.R1.fastq.gz",
        FQ2QC="01_qced/{sample}.R2.fastq.gz"
    params:
        walltime="864000", nodes="1", ppn="1", mem="20gb"
    threads: 1
    envmodules:
        "tools",
        "jre/1.8.0-openjdk",
        "anaconda2/4.4.0",
        "trimmomatic/0.36",
        "perl/5.24.0",
        "java/1.8.0-openjdk",
        "fastqc/0.11.5",
        "bowtie2/2.3.2",
        "pigz/2.3.4"
    container:
        "biobakery/kneaddata"
    shell:
        """  
        echo `date` Starting QC 
        kneaddata {input.FQ1} {input.FQ2} \
        -db {params.QC_HOST_DATABASE} \
        --output {params.TMP_DIR} \
        --output-prefix {params.SAMPLE} \
        -q phred33 --threads {threads}  --processes {threads} \
        --trimmomatic /services/tools/trimmomatic/0.36 \
        --trimmomatic-options="{params.QC_TRIMMOMATIC_PARAMS}" \
        --bowtie2 /services/tools/bowtie2/2.3.2 \
        --bowtie2-options="-p {threads}" \
        --fastqc /services/tools/ngs/FastQC-0.11.5 \
        1> {params.LOGDIR}/kneaddata/{params.SAMPLE}.out \
        2> {params.LOGDIR}/kneaddata/{params.SAMPLE}.err

        pigz {params.TMP_DIR}/{params.SAMPLE}_kneaddata_paired_1.fastq
        pigz {params.TMP_DIR}/{params.SAMPLE}_kneaddata_paired_2.fastq      
        mv {params.TMP_DIR}/{params.SAMPLE}_kneaddata_paired_1.fastq.gz {output.FQ1QC}
        mv {params.TMP_DIR}/{params.SAMPLE}_kneaddata_paired_2.fastq.gz {output.FQ2QC}

        echo `date` Removing temporary files
        rm {params.TMP_DIR}/{input.SAMPLE}_kneaddata*

        """

### Assembly

rule spades_assembly:
    input:
        FQ1 = lambda wildcards: '--input ' + sample2path[wildcards.sample][0],
        FQ2 = lambda wildcards: '--input ' + sample2path[wildcards.sample][1]
    output:
        assembly_dir = directory("02_assembly/{sample}"),
        assembly = "02_assembly/{sample}/{sample}.contigs.flt.fa"
    params:
        TMP_DIR = 'tmp/{sample}.assembly',
        SAMPLE = "{sample}"
    params:
        walltime="864000", nodes="1", ppn="14", mem="35gb"
    threads: 14
    envmodules:
        "tools",
        "anaconda2/4.4.0",
        "pigz/2.3.3"
    shell:
        """
        echo `date` Starting Assembly with Spades
        spades.py --meta \
			-t {threads} \
			--tmp-dir {params.TMP_DIR} \
			-k 21,33,55,77,99\
			-1 {input.FQ1}\
			-2 {input.FQ2}\
			-o ${output.assembly_dir}
        echo `date` done

        python reads_to_bins/scripts/fastx_filterfasta.py --i {output.assembly_dir}/contigs.fasta \
        --o {output.assembly_dir}/contigs.flt.fa \
        --min 2000 \
        --id {params.SAMPLE}

        pigz {output.assembly_dir}/contigs.fasta
        pigz {output.assembly_dir}/contigs.flt.fa  
        rm -rf {params.TMP_DIR}
        """


### Prepare assembled Contigs 
# https://github.com/RasmussenLab/vamb/blob/master/workflow/vamb.snake.conda.py <- Similar to this
rule cat_contigs:
    input:
        CONTIGFILES
    output:
        "combined_assemblies/contigs.flt.fna.gz"
    threads:
        int(1)
    log:
        "log/contigs/catcontigs.log"
    conda:
        "reads_to_bins/envs/vamb.yaml"
    shell:
        "concatenate.py {output} {input} -m 2000 --keepnames"

rule index:
    input:
        contigs = "combined_assemblies/contigs.flt.fna.gz"
    output:
        mmi = "combined_assemblies/contigs.flt.mmi"
    params:
        walltime="864000", nodes="1", ppn="1", mem="90gb"
    threads:
        int(1)
    log:
        "log/contigs/index.log"
    conda: 
        "reads_to_bins/envs/samtools_minimap2.yaml"
    shell:
        "minimap2 -d {output} {input} 2> {log}"


rule dict:
    input:
        contigs = "combined_assemblies/contigs.flt.fna.gz"
    output:
        dict = "combined_assemblies/contigs.flt.dict"
    params:
        walltime="864000", nodes="1", ppn="1", mem="10gb"
    threads:
        int(1)
    log:
        "log/contigs/dict.log"
    conda:
        "reads_to_bins/envs/samtools_minimap2.yaml"
    shell:
        "samtools dict {input.contigs} | cut -f1-3 > {output.dict} 2> {log}"

rule minimap2:
    input:
        FQ1 = lambda wildcards: '--input ' + sample2path[wildcards.sample][0],
        FQ2 = lambda wildcards: '--input ' + sample2path[wildcards.sample][1],
        mmi = "combined_assemblies/contigs.flt.mmi",
        dict = "combined_assemblies/contigs.flt.dict"
    output:
        bam = "03_mapping/{sample}.bam"
    params:
        walltime="864000", nodes="1", ppn="14", mem="35gb"
    threads: 14
    log:
        "log/map/{sample}.minimap.log"
    conda:
        "reads_to_bins/envs/samtools_minimap2.yaml"
    shell:
        """  
        minimap2 -t {threads} -ax sr {input.mmi} {input.FQ1} {input.FQ2} |\
        grep -v "^@" | cat {input.dict} - | samtools view -F 3584 -b - > {output.bam} 2>{log}
        """

rule bamsort:
    input:
        bam ="03_mapping/{sample}.bam"
    output:
        bamsorted = temp("03_mapping/{sample}.bam.sorted")
    params:
        walltime="864000", nodes="1", ppn="1", mem="15gb",
        prefix="mapped/tmp.{sample}"
    threads:
        int(2)
    log:
        "log/map/{sample}.sort.log"
    conda:
        "reads_to_bins/envs/samtools_minimap2.yaml"
    shell:
        "samtools sort {input.bam} -T {params.prefix} --threads 1 -m 3G -o {output.bamsorted} 2>{log}"

### Run VAMB & Write out Bins
rule vamb:
    input:
        contigs = "combined_assemblies/contigs.flt.fna.gz"
    output:
        vambout = directory( VAMBDIR )
    params:
        walltime="86400", nodes="1", ppn="30", mem="190gb",
        minimum_size = 1*10**6
    log:
        "log/vamb/vamb.log"
    threads: 30
    conda:
        "reads_to_bins/envs/vamb.yaml"
    shell:
        """
        rm -rf 05_binning/vamb
        vamb --outdir {output.vambout} --fasta {input.contigs} --bamfiles 03_mapping/*.bam 2>{log}" 
        python reads_to_bins/scripts/write_MAG_bins.py -c {output.vambout}/clusters.tsv \
        -f {input.contigs} \
        -d {output.vambout}/genomes \
        -m {params.minimum_size}

        """

### 
### Evaluate MAG completeness 
### [TODO]We basically need the Genomes with size > 1 mbp here
### Also 
rule checkm:
    input:
        os.path.join("05_binning/vamb","clusters.tsv")
    output:
        checkm = os.path.join( VAMBDIR , "checkm/checkm.results.txt"),
        checkm_MQNC = os.path.join( VAMBDIR , "checkm/checkm.MQNC.txt")
    params:
        walltime="86400", nodes="1", ppn=THREADS, mem="190gb",
        bins = os.path.join( VAMBDIR ,"genomes"),
        outdir = os.path.join( VAMBDIR , "checkm")
    log:
        "log/vamb/checkm.log"
    threads: THREADS
    conda:
        "envs/checkm.yaml"
    shell:
        """
        checkm lineage_wf -f {output.checkm} -t {threads} -x fna {params.bins} {params.outdir} 2>{log}
        python reads_to_bins/scripts/get_MQNC_subset.py -c {output.checkm} -o {output.checkm_MQNC}
        
        """

### Select MQ and NC Bins for GTDB-TK 
## 

### Get Taxonomy of MQ and NC Bacteria
rule gtdbtk_taxonomy:
    input:
        checkm_MQNC = os.path.join( VAMBDIR , "checkm/checkm.MQNC.txt")
    params:
        REF = GTDBTKREF,
        REFMETA = os.path.join(GTDBTKREF,'metadata','genome_metadata.tsv'),
        tmpdir = 'tmp/tmp_gtdbtk',
        VAMBDIR = VAMBDIR
    output:
        gtdbkout = os.path.join(VAMBDIR , "gtdbtk")
    conda:
        "reads_to_bins/envs/gtdbtk.yaml"
    threads: THREADS
    shell:
        """
        export GTDBTK_DATA_PATH={params.REF}
        
        ### Copy MQ+NC Genomes to a seperate directory  
        for MAG in `cut -f1 {input.checkm_MQNC}`; do
            cp {params.VAMBDIR}/genomes/${MAG}.fna {params.tmpdir}
        done

        gtdbtk classify_wf \
        --genome_dir {params.tmpdir}\
        --out_dir {output} \
        --cpus {threads} \
        --force
        rm {params.tmpdir}/*

        ### 
        python reads_to_bins/scripts/gtdb_to_ncbi_majority_vote.py --gtdbtk_output_dir {output} \
        --output_file {output}/mag_taxonomy.txt \
        --bac120_metadata_file {params.REFMETA}

        ### Summarise MAG annotations pr. VAMB cluster

        """


### EXTRA
rule bamcoverage:
    input:
        bamsorted = "03_mapping/{sample}.bam.sorted"
    output:
        contig_coverage = "03_mappingcoverage/{sample}.position.coverage",
        contig_coverage_zero = "03_mappingcoverage/{sample}.position.zero.coverage"
    threads: 1
    log:
        "log/map/{sample}.coverage.log"
    conda:
        "reads_to_bins/envs/bedtools.yaml"
    shell:
        """
        bedtools genomecov -ibam {input.bamsorted} > {output.contig_coverage}
        
        ### Write out the fraction of the contig with Depth Zero 
        awk '$2==0' {output.contig_coverage} > {output.contig_coverage_zero}
        """

