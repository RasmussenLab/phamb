#!/usr/bin/env python
from Bio import SeqIO
import os
import gzip

configfile: 'mag_annotation/config.yaml'


### Config
MICOMPLETEDB = config.get("MICOMPLETEDB")
VOGDB= config.get("VOGDB")
PROJECT = config.get("cluster_project") # Who's paying for running this Flow on a Server-cluster?
TMP_DIR = config.get("tmpdir")
CONTIGSUFFIX = '.fna'
THREADS = config.get("threads_ppn")
ASSEMBLY = config.get("combined_assembly")
VAMBDIR = config.get("vamb_directory")
GTDBTKREF = config.get('GTDBK_reference')


###  Cluster Execution 
# The variables: walltime, nodes, ppn, mem and project are only relevant when submitting the Snake-flow as Cluster execution 
# i.e. snakemake -s mag_annotation/Snakefile --use-conda --use-envmodules
# i.e. snakemake -s Snakefile --cluster qsub -j 32 --use-conda --use-envmodules
###


### read sample ids to be parsed.
sample_table = 'sample_table_test.txt'
IDS = []
with open(sample_table,'r') as infile:
    for line in infile:
        line = line.rstrip()
        IDS.append(line)

rule all:
    input:
        expand("sample_annotation/{sample}/{sample}.hmmMiComplete105.tbl", sample=IDS),
        expand("sample_annotation/{sample}/{sample}.hmmVOG.tbl", sample=IDS),
        directory(expand("sample_annotation/{sample}/{sample}" + CONTIGSUFFIX + "_gt2000bp_dvfpred.txt", sample=IDS))


rule PRODIGAL:
    input:
        contigs = "assembly/{sample}/{sample}" + CONTIGSUFFIX
    output:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        genes = "sample_annotation/{sample}/{sample}.predicted_proteins.fna"
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    conda:
        "envs/prodigal.yaml"
    log:
        "magannotation_log/prodigal/{sample}.prodigal.log"
    shell:
        "prodigal -i {input.contigs} -d {output.genes} -a {output.proteins} -p meta -g 11 -q 2>{log}"

rule miComplete:
    input:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        DB = 'mag_annotation/dbs/Bact105.hmm'
    output:
        hmmfile = "sample_annotation/{sample}/{sample}.hmmMiComplete105.tbl"
    params:
        tmpoutput = "sample_annotation/{sample}/{sample}.micomplete.tmp",
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    conda:
        "envs/hmmer.yaml"
    log:
        "magannotation_log/hmm/{sample}.micomplete.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 -o {params.tmpoutput} --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"

rule VOG:
    input:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        DB = 'mag_annotation/dbs/vog_hmms/AllVOG.hmm'
    output:
        hmmfile = "sample_annotation/{sample}/{sample}.hmmVOG.tbl"
    params:
        tmpoutput = "sample_annotation/{sample}/{sample}.hmmVOG.tmp",
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 24
    conda:
        "envs/hmmer.yaml"
    log:
        "magannotation_log/hmm/{sample}.VOG.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 -o {params.tmpoutput} --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"

rule DeepVirFinder:
    input:
        contigs = "assembly/{sample}/{sample}" + CONTIGSUFFIX
    output:
        dvffile = directory("sample_annotation/{sample}/{sample}" + CONTIGSUFFIX + "_gt2000bp_dvfpred.txt")
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 24
    conda:
        "envs/dvf.yaml"
    log:
        "magannotation_log/DVF/{sample}.dvf.log"
    shell:
        "python /home/projects/cpr_10006/projects/phamb/tools/DeepVirFinder/dvf.py "
        "-i {input.contigs} -o {output.dvffile} -l 2000 -c {threads} 2>{log}"

#   rule summarise_annotations:
#       input:
#           vambdir = VAMBDIR,
#           sample_table = sample_table,
#           annotation_directory = "bin_annotation",
#           combined_assembly = ASSEMBLY
#       output:
#           outdir = directory( "sample_annotation/annotation_summaries" ),
#           "sample_annotation/annotation_summaries/VAMBV3.Viral_RF_predictions.bins.fna",
#           "sample_annotation/annotation_summaries/VAMBV3.Viral_RF_predictions.contigs.fna",
#           "sample_annotation/annotation_summaries/vambbins_aggregated_annotation.txt",
#           "sample_annotation/annotation_summaries/vambbins_aggregated_annotation.Viral.txt"
#       shell:
#           """
#           python scripts/parse_annotation.py -v {input.vambdir} \
#           -s {input.sample_table} \
#           -a {input.annotation_directory} \
#           -o {output.outdir} \
#           --fasta {input.combined_assembly \
#           --decontaminate
#           """
