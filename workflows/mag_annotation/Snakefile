#!/usr/bin/env python
from Bio import SeqIO
import os
import gzip

configfile: 'mag_annotation/config.yaml'


### Config
MICOMPLETEDB = config.get("MICOMPLETEDB")
VOGDB= config.get("VOGDB")
DVFDIR = config.get("DVFDIR")
DVFDIR = '/home/projects/cpr_10006/projects/phamb/tools/DeepVirFinder'


PROJECT = config.get("cluster_project") # Who's paying for running this Flow on a Server-cluster?
TMP_DIR = config.get("tmpdir")
CONTIGSUFFIX = '.fna'
THREADS = config.get("threads_ppn")
ASSEMBLY = config.get("combined_assembly")
VAMBDIR = config.get("vamb_directory")
GTDBTKREF = config.get('GTDBK_reference')


###  Cluster Execution 
# The variables: walltime, nodes, ppn, mem and project are only relevant when submitting the Snake-flow as Cluster execution 
# i.e. snakemake -s mag_annotation/Snakefile --use-conda --use-envmodules
# i.e. snakemake -s Snakefile qsub -j 32 --use-conda --cluster "qsub -e {logs_mag_annotation} -o {logs_mag_annotation}"
###


### read sample ids to be parsed.
sample_table = 'sample_table.txt'
IDS = []
with open(sample_table,'r') as infile:
    for line in infile:
        line = line.rstrip()
        IDS.append(line)

rule all:
    input:
        expand("sample_annotation/{sample}/{sample}.hmmMiComplete105.tbl", sample=IDS),
        expand("sample_annotation/{sample}/{sample}.hmmVOG.tbl", sample=IDS),
        expand("sample_annotation/{sample}/{sample}_dvf/{sample}.fna_gt2000bp_dvfpred.txt", sample=IDS)


rule PRODIGAL:
    input:
        contigs = "assembly/{sample}/{sample}" + CONTIGSUFFIX 
    output:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        genes = "sample_annotation/{sample}/{sample}.predicted_proteins.fna"
    params:
        walltime="18000", nodes="1", ppn="1", mem="5gb", project=PROJECT,
        tmp_contigs = "sample_annotation/{sample}.unzipped_contigs.fna"
    threads: 1
    conda:
        "envs/prodigal.yaml"
    log:
        "magannotation_log/prodigal/{sample}.prodigal.log"
    shell:
        """
        if [[ {input.contigs} = *.gz ]]; then
            gunzip -c {input.contigs} > {params.tmp_contigs}
            prodigal -i {params.tmp_contigs} -d {output.genes} -a {output.proteins} -p meta -g 11 -q 2>{log}
            rm {params.tmp_contigs}
        else
            prodigal -i {input.contigs} -d {output.genes} -a {output.proteins} -p meta -g 11 -q 2>{log}
        fi
        """

rule miComplete:
    input:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        DB = 'mag_annotation/dbs/Bact105.hmm'
    output:
        hmmfile = "sample_annotation/{sample}/{sample}.hmmMiComplete105.tbl"
    params:
        tmpoutput = "sample_annotation/{sample}/{sample}.micomplete.tmp",
        walltime="18000", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    conda:
        "envs/hmmer.yaml"
    log:
        "magannotation_log/hmm/{sample}.micomplete.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 -o {params.tmpoutput} --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"

rule VOG:
    input:
        proteins = "sample_annotation/{sample}/{sample}.predicted_proteins.faa",
        DB = 'mag_annotation/dbs/vog_hmms/AllVOG.hmm'
    output:
        hmmfile = "sample_annotation/{sample}/{sample}.hmmVOG.tbl"
    params:
        tmpoutput = "sample_annotation/{sample}/{sample}.hmmVOG.tmp",
        walltime="18000", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    conda:
        "envs/hmmer.yaml"
    log:
        "magannotation_log/hmm/{sample}.VOG.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 -o {params.tmpoutput} --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"


rule DeepVirFinder:
    input:
        contigs = "assembly/{sample}/{sample}" + CONTIGSUFFIX
    output:
        dvffile = "sample_annotation/{sample}/{sample}_dvf/{sample}.fna_gt2000bp_dvfpred.txt"
    params:
        dvfscript = os.path.join(DVFDIR,'dvf.py'),
        walltime="18000", nodes="1", ppn="1", mem="10gb", project=PROJECT,
        dvfdir = "sample_annotation/{sample}/{sample}_dvf"
    threads: 1
    conda:
        "envs/dvf.yaml"
    log:
        "magannotation_log/DVF/{sample}.dvf.log"
    shell:
        """
        export THEANO_FLAGS="base_compiledir={params.dvfdir}"
        python {params.dvfscript} -i {input.contigs} -o {params.dvfdir} -l 2000 -c {threads} 2>{log}
        """

