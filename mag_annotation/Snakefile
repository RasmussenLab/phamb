#!/usr/bin/env python

configfile: 'config.yaml'


### Config
MICOMPLETEDB = config.get("MICOMPLETEDB")
VOGDB= config.get("VOGDB")
SAMPLES = config.get("sample_file_path")
PROJECT = config.get("cluster_project") # Who's paying for running this Flow on a Server-cluster?
TMP_DIR = config.get("tmpdir")
CONTIGSUFFIX = config.get("contig_suffix")
THREADS = config.get("threads_ppn")
ASSEMBLY = config.get("combined_assembly")
VAMBDIR = config.get("vamb_directory")
GTDBK_reference = config.get('GTDBK_reference')

###  Cluster Execution 
# The variables: walltime, nodes, ppn, mem and project are only relevant when submitting the Snake-flow as Cluster execution 
# i.e. snakemake -s Snakefile --cluster qsub -j 32 --use-conda --use-envmodules
###


### read sample ids to be parsed.
IDS = []
with open(SAMPLES,'r') as infile:
    for line in infile:
        line = line.rstrip()
        IDS.append(line)

rule all:
    input:
        expand("04_snakeanno/{sample}/{sample}.hmmMiComplete105.tbl", sample=IDS),
        expand("04_snakeanno/{sample}/{sample}.hmmVOG.tbl", sample=IDS),
        expand("04_snakeanno/{sample}/contigs" + CONTIGSUFFIX + "_gt2000bp_dvfpred.txt", sample=IDS)



rule PRODIGAL:
    input:
        contigs = "assembly/{sample}/{sample}" + CONTIGSUFFIX
    output:
        proteins = "04_snakeanno/{sample}/{sample}.predicted_proteins.faa",
        genes = "04_snakeanno/{sample}/{sample}.predicted_proteins.fna"
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    envmodules:
        "tools",
        "prodigal/2.6.3"
    log:
        "log/prodigal/{sample}.prodigal.log"
    shell:
        "prodigal -i {input.contigs} -d {output.genes} -a {output.proteins} -p meta -g 11 -q 2>{log}"

rule miComplete:
    input:
        proteins = "04_snakeanno/{sample}/{sample}.predicted_proteins.faa",
        DB = MICOMPLETEDB
    output:
        hmmfile = "04_snakeanno/{sample}/{sample}.hmmMiComplete105.tbl"
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    envmodules:
        "tools",
        "hmmer/3.2.1"
    log:
        "log/hmm/{sample}.micomplete.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"

rule VOG:
    input:
        proteins = "04_snakeanno/{sample}/{sample}.predicted_proteins.faa",
        DB = VOGDB
    output:
        hmmfile = "04_snakeanno/{sample}/{sample}.hmmVOG.tbl"
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    envmodules:
        "tools",
        "hmmer/3.2.1"
    log:
        "log/hmm/{sample}.VOG.log"
    shell:
        "hmmsearch --cpu {threads} -E 1.0e-05 --tblout {output.hmmfile} {input.DB} {input.proteins} 2>{log}"

rule DeepVirFinder:
    input:
        contigs = "02_assembly/{sample}/{sample}" + CONTIGSUFFIX
    output:
        dvffile = "04_snakeanno/{sample}/contigs" + CONTIGSUFFIX + "_gt2000bp_dvfpred.txt" 
    params:
        walltime="9600", nodes="1", ppn="1", mem="5gb", project=PROJECT
    threads: 1
    conda:
        "MAG_annotation/envs/dvf.yaml"
    log:
        "log/DVF/{sample}.dvf.log"
    shell:
        "python /home/projects/cpr_10006/projects/phamb/tools/DeepVirFinder/dvf.py "
        "-i {input.contigs} -o {output.dvffile} -l 2000 -c {threads} 2>{log}"

rule summarise_annotations:
    input:
        clusterfike = os.path.join(VAMBDIR,'clusters.tsv'),
        sample_table = SAMPLES,
        annotation_directory = "04_snakeanno",
        combined_assembly = ASSEMBLY
    output:
        outdir = directory( "04_snakeanno/annotation_summaries" )
    conda:
        "MAG_annotation/envs/python38.yaml"
    shell:
        """
        python scripts/parse_annotation.py -c {input.clusterfile} \
        -s {input.sample_table} \
        -a {input.annotation_directory} \
        -o {output.outdir} \
        --fasta {input.combined_assembly \
        --decontaminate

        """

### 
## Evaluate MAG completeness
rule checkm:
    input:
        "vamb/clusters.tsv"
    output:
        "vamb/checkm.results"
    params:
        walltime="86400", nodes="1", ppn=CHECKM_PPN, mem=CHECKM_MEM,
        bins = "vamb/bins",
        outdir = "vamb/checkm.outdir"
    log:
        "log/vamb/checkm.log"
    threads:
        int(CHECKM_PPN)
    conda:
        "envs/checkm.yaml"
    shell:
        "checkm lineage_wf -f {output} -t {threads} -x fna {params.bins} {params.outdir} 2>{log}"



### Get Taxonomy of MQ and NC Bacteria
rule gtdbtk_taxonomy:
    input:
        
    output:
        gtdbkout = '07_'

rule get_gtdbtk_consensus:
    input:
        metadata = os.path.join(GTDBK_reference,'metadata/genome_metadata.tsv')
    shell:
        """
        python MAG_annotation/scripts/gtdb_to_ncbi_majority_vote.py --gtdbtk_output_dir 07_binannotation/bacteria/gtdbtk
        """